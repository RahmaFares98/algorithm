function rFib(num) {
    // Handle non-integer and negative values by treating them as 0
    num = Math.floor(num);
    if (num < 0) return 0;

    // Base cases
    if (num === 0) return 0;
    if (num === 1) return 1;

    // Recursive case
    return rFib(num - 1) + rFib(num - 2);
}

console.log(rFib(2));  // Output: 1
console.log(rFib(3));  // Output: 2
console.log(rFib(4));  // Output: 3
console.log(rFib(5));  // Output: 5
console.log(rFib(3.65));  // Output: 2
console.log(rFib(-2));    // Output: 0
function rTrib(num) {
    // Handle non-integer and negative values by treating them as 0
    num = Math.floor(num);
    if (num < 0) return 0;

    // Base cases
    if (num === 0) return 0;
    if (num === 1) return 0;
    if (num === 2) return 1;

    // Recursive case
    return rTrib(num - 1) + rTrib(num - 2) + rTrib(num - 3);
}

console.log(rTrib(3));  // Output: 1
console.log(rTrib(4));  // Output: 2
console.log(rTrib(5));  // Output: 4
console.log(rTrib(6));  // Output: 7
console.log(rTrib(-5)); // Output: 0
console.log(rTrib(6.8)); // Output: 7 (since it truncates 6.8 to 6)

function ackermann(num1, num2) {
    // Base case
    if (num1 === 0) return num2 + 1;

    // Recursive cases
    if (num1 > 0 && num2 === 0) {
        return ackermann(num1 - 1, 1);
    } else {
        return ackermann(num1 - 1, ackermann(num1, num2 - 1));
    }
}

console.log(ackermann(0, 5));  // Output: 6
console.log(ackermann(2, 2));  // Output: 7
console.log(ackermann(3, 2));  // Output: 29
// ackermann(4, 2) would result in very deep recursion and likely cause a stack overflow.
function Zibonacci(num) {
    // Handle non-integer and negative values
    num = Math.floor(num);
    if (num < 0) return 0;

    // Base cases
    if (num === 0) return 1;
    if (num === 1) return 1;
    if (num === 2) return 2;

    // Recursive case for odd values
    if (num % 2 === 1) {
        let n = (num - 1) / 2;
        return Zibonacci(n) + Zibonacci(n - 1) + 1;
    } 
    // Recursive case for even values
    else {
        let n = num / 2;
        return Zibonacci(n) + Zibonacci(n + 1) + 1;
    }
}

console.log(Zibonacci(10));  // Output: Zibonacci(10) = 15
console.log(Zibonacci(100)); // Output: Zibonacci(100) = 144
