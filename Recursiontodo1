function rSigma(num) {
    // Treat numbers less than 1 as returning 0
    if (num < 1) {
        return 0;
    }
    
    // Truncate the number if it's a float
    num = Math.floor(num);

    // Base case: return num if it's 1
    if (num === 1) {
        return 1;
    }

    // Recursive case: sum current number with rSigma(num - 1)
    return num + rSigma(num - 1);
}

console.log(rSigma(5));    // Output: 15 (1+2+3+4+5)
console.log(rSigma(2.5));  // Output: 3 (1+2)
console.log(rSigma(-1));   // Output: 0


function rFact(num) {
    // If num is less than 1, treat it as 0! which is 1
    if (num < 1) {
        return 1;
    }
    
    // Truncate the number if it's a float
    num = Math.floor(num);

    // Base case: return 1 if num is 1 or 0 (since 0! = 1)
    if (num === 1) {
        return 1;
    }

    // Recursive case: multiply current number with rFact(num - 1)
    return num * rFact(num - 1);
}

console.log(rFact(3));     // Output: 6 (1*2*3)
console.log(rFact(6.5));   // Output: 720 (1*2*3*4*5*6)
console.log(rFact(-1));    // Output: 1 (treating it as 0!)

function floodFill(canvas, startXY, newColor) {
    const startX = startXY[0];
    const startY = startXY[1];
    const originalColor = canvas[startX][startY];

    // If the original color is the same as newColor, no need to proceed
    if (originalColor === newColor) {
        return canvas;
    }

    function fill(x, y) {
        // Check if the current pixel is out of bounds
        if (x < 0 || y < 0 || x >= canvas.length || y >= canvas[0].length) {
            return;
        }
        
        // Only fill if the color matches the original color
        if (canvas[x][y] === originalColor) {
            canvas[x][y] = newColor;
            
            // Recursively fill the four adjacent cells (up, down, left, right)
            fill(x - 1, y); // Up
            fill(x + 1, y); // Down
            fill(x, y - 1); // Left
            fill(x, y + 1); // Right
        }
    }

    fill(startX, startY);
    return canvas;
}

// Example usage:
const canvas = [
    [1, 2, 3, 4],
    [5, 3, 3, 2],
    [3, 3, 3, 4],
    [1, 2, 3, 3]
];
const startXY = [2, 2];
const newColor = 1;

console.log(floodFill(canvas, startXY, newColor));
/*
Output:
[
    [1, 2, 1, 4],
    [5, 1, 1, 2],
    [1, 1, 1, 4],
    [1, 2, 1, 1]
]
*/

